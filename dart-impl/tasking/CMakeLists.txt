project(project_dash_dart_impl_tasking C)

# Library name
set(DASH_DART_IMPL_TASKING_LIBRARY dart-tasking)

# Pass options to NVCC
set(TASKING_CC_FLAGS -pthread)

# Include library for dlopen and dlsym (-ldl)
set (LIB_DL dl)

set(DASH_DART_BASE_LIBRARY dart-base)
set(DASH_DART_IMPL_MPI_LIBRARY dart-mpi)

set(ENABLE_DART_LOGGING ${ENABLE_DART_LOGGING}
    PARENT_SCOPE)

set(DASH_DART_MPI_INCLUDE_DIR
    ${CMAKE_CURRENT_SOURCE_DIR}/../mpi/include)

if (AYUDAME_FOUND AND ENABLE_AYUDAME)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_AYUDAME)
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${AYUDAME_INCLUDE_DIRS})
endif()

if (ENABLE_VALGRIND AND VALGRIND_FOUND)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_VALGRIND)
  set (ADDITIONAL_INCLUDES
       ${ADDITIONAL_INCLUDES} ${VALGRIND_INCLUDE_DIRS})
endif()

if (HWLOC_FOUND AND ENABLE_HWLOC)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_HWLOC)
  set (ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES}
       ${HWLOC_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${HWLOC_LIBRARIES} ${LIB_DL})
endif()

if (TCMALLOC_FOUND AND ENABLE_TCMALLOC)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_TCMALLOC)
endif()

if (ENABLE_DART_LOGGING)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDASH_ENABLE_LOGGING)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_LOGGING)
endif()

if (AYUDAME_FOUND AND ENABLE_AYUDAME)
  set (ADDITIONAL_INCLUDES
       ${ADDITIONAL_INCLUDES} ${AYUDAME_INCLUDE_DIRS})
  set (ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES}
       ${AYUDAME_LIBRARIES})
endif()

if (NUMA_FOUND AND ENABLE_LIBNUMA)
  set (ADDITIONAL_COMPILE_FLAGS
       ${ADDITIONAL_COMPILE_FLAGS} -DDART_ENABLE_NUMA)
endif()

# Source- and header files to be compiled (OBJ):
file(GLOB_RECURSE DASH_DART_IMPL_TASKING_SOURCES "src/*.c" "src/*.h" "src/*.cc")
file(GLOB_RECURSE DASH_DART_IMPL_TASKING_HEADERS "include/*.h")

# Include directory to selected version of DART interface
set(DASH_DART_IF_INCLUDE_DIR
   ${CMAKE_CURRENT_SOURCE_DIR}/../../dart-if/include)

## Build targets

# Directories containing the implementation of the library (-I):
set(DASH_DART_IMPL_TASKING_INCLUDE_DIRS
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  ${CMAKE_CURRENT_SOURCE_DIR}/src
)
include_directories(
  ${DASH_DART_IMPL_TASKING_INCLUDE_DIRS}
  ${DASH_DART_IF_INCLUDE_DIR}
  ${DASH_DART_IMPL_MPI_INCLUDE_DIRS}
  ${DASH_DART_MPI_INCLUDE_DIR}
  ${DASH_DART_BASE_INCLUDE_DIR}
  ${ADDITIONAL_INCLUDES}
)
# Library compilation sources
add_library(
  ${DASH_DART_IMPL_TASKING_LIBRARY} # library name
  ${DASH_DART_IMPL_TASKING_SOURCES} # sources
  ${DASH_DART_IMPL_TASKING_HEADERS} # headers
)

# Link dependencies
target_link_libraries(
  ${DASH_DART_IMPL_TASKING_LIBRARY}
  ${DASH_DART_IMPL_MPI_LIBRARY}
  ${DASH_DART_BASE_LIBRARY}
)

set(ADDITIONAL_COMPILE_FLAGS_STR "")
foreach (ADDITIONAL_FLAG ${ADDITIONAL_COMPILE_FLAGS})
  message (STATUS "    " ${ADDITIONAL_FLAG})
  set(ADDITIONAL_COMPILE_FLAGS_STR
      "${ADDITIONAL_COMPILE_FLAGS_STR} ${ADDITIONAL_FLAG}")
endforeach()

# Compile flags
set_target_properties(
  ${DASH_DART_IMPL_TASKING_LIBRARY} PROPERTIES
  COMPILE_FLAGS "${ADDITIONAL_COMPILE_FLAGS_STR}"
  C_STANDARD ${DART_C_STD_PREFERED}
  C_STANDARD_REQUIRED ON
)

## Installation

# Headers
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/dash
        DESTINATION include FILES_MATCHING PATTERN "*.h")
# Generated headers, if any
# install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/dash
#         DESTINATION include FILES_MATCHING PATTERN "*.h")
# Library
install(TARGETS ${DASH_DART_IMPL_TASKING_LIBRARY} DESTINATION lib)

